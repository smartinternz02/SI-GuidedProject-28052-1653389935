											Apex Integration Services

Control Processes with Queueable Apex


AddPrimaryContact

public class AddPrimaryContact implements Queueable
{
private Contact c;
private String state;
public AddPrimaryContact(Contact c, String state)
{
this.c = c;
this.state = state;
}
public void execute(QueueableContext context)
{
List<Account> ListAccount = [SELECT ID, Name ,(Select id,FirstName,LastName from contacts ) FROM ACCOUNT WHERE BillingState = :state LIMIT 200];
List<Contact> lstContact = new List<Contact>();
for (Account acc:ListAccount)
{
Contact cont = c.clone(false,false,false,false);
cont.AccountId = acc.id;
lstContact.add( cont );
}

if(lstContact.size() >0 )
{
insert lstContact;
}

}

}
						AddPrimaryContactTest
@isTest
public class AddPrimaryContactTest
{
@isTest static void TestList()
{
List<Account> Teste = new List <Account>();
for(Integer i=0;i<50;i++)
{
Teste.add(new Account(BillingState = 'CA', name = 'Test'+i));
}
for(Integer j=0;j<50;j++)
{
Teste.add(new Account(BillingState = 'NY', name = 'Test'+j));
}
insert Teste;

Contact co = new Contact();
co.FirstName='demo';
co.LastName ='demo';
insert co;
String state = 'CA';

AddPrimaryContact apc = new AddPrimaryContact(co, state);
Test.startTest();
System.enqueueJob(apc);
Test.stopTest();
}
}

Schedule Jobs Using the Apex Scheduler


					DailyLeadProcessor

global class DailyLeadProcessor implements Schedulable {
    global void execute(SchedulableContext sc) {
        List<Lead> lstOfLead = [Select Id  from Lead where LeadSource = null limit 200];
        List<Lead> lstOfUpdatedLead= new List<Lead>();

   if(!lstOfLead.isEmpty()){
       for(Lead ld:lstOfLead){
   ld.LeadSource='Dreamforce';
            lstOfUpdatedLead.add(ld);
        }
        UPDATE lstOfUpdatedLead;
		}	
    }
}
						DailyLeadProcessorTest
@isTest
public class DailyLeadProcessorTest {
    @testSetup
    static void setup(){
            List<Lead> lstOfLead= new List<Lead>();
            for(Integer i=1;i<=200;i++){
   Lead ld=new Lead(Company ='Comp'+i,LastName='LN'+i,Status ='Working -Contacted');
   lstOfLead.add(ld);
            }
        Insert lstOfLead;
        }
    static testmethod void testDailyLeadProcessorJob(){
        String sch='0 5 12 * * ? ';
        Test.startTest();
        String jobId=System.Schedule('ScheduledApexText',sch, new DailyLeadProcessor());
        List<Lead> lstOfLead=[Select id from Lead  WHERE LeadSource =null LIMIT 200];
        system.assertEquals(200,lstOfLead.size());
        Test.stopTest();
    }
}

                                          Apex REST Callouts

AnimalLocator

public class AnimalLocator{
        public static String getAnimalNameById(Integer x){
            Http http = new Http();
            HttpRequest req = new HttpRequest();
            req.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/' + x);
            req.setMethod('GET');
            Map<String, Object> animal= new Map<String, Object>();
            HttpResponse res = http.send(req);
                if (res.getStatusCode() == 200) {
            Map<String, Object> results = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
          animal = (Map<String, Object>) results.get('animal');
            }
    return (String)animal.get('name');
        }
    }


AnimalLocatorMock

@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
     // Implement this interface method
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animals": ["majestic badger", "fluffy bunny", "scary bear", "chicken", "mighty moose"]}');
        response.setStatusCode(200);
        return response; 
    }
}

AnimalLocatorTest


@isTest
private class AnimalLocatorTest{
    @isTest static void AnimalLocatorMock() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        string result = AnimalLocator.getAnimalNameById(3);
        String expectedResult = 'chicken';
        System.assertEquals(result,expectedResult );
    }
}







			Apex SOAP Callouts
ParkService


//Generated by wsdl2apex

public class ParkService {
    public class byCountryResponse {
        public String[] return_x;
        private String[] return_x_type_info = new String[]{'return','http://parks.services/',null,'0','-1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'return_x'};
    }
    public class byCountry {
        public String arg0;
        private String[] arg0_type_info = new String[]{'arg0','http://parks.services/',null,'0','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'arg0'};
    }
    public class ParksImplPort {
        public String endpoint_x = 'https://th-apex-soap-service.herokuapp.com/service/parks';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://parks.services/', 'ParkService'};
        public String[] byCountry(String arg0) {
            ParkService.byCountry request_x = new ParkService.byCountry();
            request_x.arg0 = arg0;
            ParkService.byCountryResponse response_x;
            Map<String, ParkService.byCountryResponse> response_map_x = new Map<String, ParkService.byCountryResponse>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '',
              'http://parks.services/',
              'byCountry',
              'http://parks.services/',
              'byCountryResponse',
              'ParkService.byCountryResponse'}
            );
            response_x = response_map_x.get('response_x');
            return response_x.return_x;
        }
    }
}

													 					        ParkLocator

public class ParkLocator {
    public static string[] country(string theCountry) {
        ParkService.ParksImplPort  parkSvc = new  ParkService.ParksImplPort(); // remove space
        return parkSvc.byCountry(theCountry);
    }
}
							ParkLocatorTest

@isTest
private class ParkLocatorTest {
    @isTest static void testCallout() 
    {              
        Test.setMock(WebServiceMock.class, new ParkServiceMock ());
        String country = 'United States';
        List<String> result = ParkLocator.Country(country);
        List<String> parks = new List<String>{'Yellowstone', 'Mackinac National Park', 'Yosemite'};
         System.assertEquals(parks, result); 
    }
}

						ParkServiceMock
@isTest
global class ParkServiceMock implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
        // start - specify the response you want to send
        ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();
        response_x.return_x = new List<String>{'Yellowstone', 'Mackinac National Park', 'Yosemite'};
        // end
        response.put('response_x', response_x); 
   }
}


Apex Web Services


					AccountManager

@RestResource(urlMapping = '/Accounts/*/contacts')
global with sharing class AccountManager {
	
    @HttpGet
    global static Account getAccount(){
        RestRequest request = RestContext.request;
        string accountId = request.requestURI.substringBetween('Accounts/','/contacts');
        Account result = [SELECT Id, Name, (Select Id, Name from Contacts) from Account where Id=:accountId Limit 1];
        return result;
    }
}

						AccountProcessorTest
@IsTest
private class AccountProcessorTest {
@IsTest
    private static void testCountContacts(){
        Account newAccount= new Account(Name='Test Account');
        insert newAccount;

        Contact newContact1 =new Contact(FirstName='John',LastName='Doe',AccountId=newAccount.Id);
        insert newContact1;

        Contact newContact2 =new Contact(FirstName='Jane',LastName='Doe',AccountId=newAccount.Id);
        insert newContact2;

        List<Id> accountsId =new List<Id>();
        accountsId.add(newAccount.Id);
        Test.startTest();
AccountProcessor.countContacts(accountsId);
Test.stopTest();
    }
}
AccountHandler
public class AccountHandler {
    public static Account insertNewAccount(String AccountName){
        try{
            Account newacct=new Account(Name=AccountName);
            insert newacct;
            return newacct;
        }
        catch(DmlException e){
            System.debug('A DML exception has occured:'	+e.getmessage());

     return null;
        }
    }

}
						AccountManagerTest
@IsTest
private class AccountManagerTest {
    @isTest static void testGetContactsByAccountId(){
        Id recordId = createTestRecord();
        RestRequest request = new RestRequest();
        request.requestUri = 'https://yourInstance.my.salesforce.com/services/apexrest/Accounts/'
			+ recordId+'/contacts';
        request.httpMethod = 'GET';
        RestContext.request = request;
        Account thisAccount = AccountManager.getAccount();
        System.assert(thisAccount != null);
        System.assertEquals('Test record', thisAccount.Name);
    }

    static Id createTestRecord(){
        Account accountTest = new Account(
	Name ='Test record');
        insert accountTest;

        Contact contactTest = new Contact(
	FirstName='John',
	LastName = 'Doe',
	AccountId = accountTest.Id
        );
        insert contactTest;

        return accountTest.Id;
    }
}

